{{> layout/header }}
{{> layout/leftmenu }}
{{> layout/gnb }}
<!-- ============================================================== -->
<!-- main  -->
<!-- ============================================================== -->
<script>
    //1. 숫자와 문자
    // 따옴표로 감싸면 string
    // 따옴표로 안감싸면 number
        //alert('rrrr');
        //alert(2222);
    // type이 뭔지 알수있음
        //alert(typeof 2222);
    // 문자의 길이를 구할때는 length를 붙인다
        //alert('ㄱㄱㄱ'.length);

    //2. 변수
    // 변수선언 var, let, const 차이점
    // 변수 var는 undefined로 초기화되고
    // let, const는 초기화값이 없으면 참조되지않는 값이 된다.

    //console.log(a); // 호이스팅되어 undefined로 초기화 된다
    // 호이스팅 될때 메모리에 잡혀버린다는 것이다.
    // 함수도 호이스팅 될 수 있음
    //console.log(b); // 호이스팅은 되지만 초기화 되지않고 '참조되지않은 값'으로 남아있는다
    //console.log(c);
    // let과 const는 호이스팅 될때 메모리에 잡히지 않은 상태로 있는다.
    var a = 'var';
    let b = 'let'; const c = 'const';
    // 값이 할당되면 그 때 메모리에 잡히게 된다.
    // console.log(a);
    // console.log(b);
    // console.log(c);

    // 기본적으로 js에서는 number, string, array, map 이 있다.
    let aa = 1;
    let bb = "string";
    let cc = [1, 2, 3];
    let dd = {"key1":"value", "key2":"value"}
    // 여기에서 number, string은 value로 저장되고
    // array, map은 reference로 저장된다.
    // https://bcp0109.tistory.com/360
    // 저장되는 변수가 reference가 저장된다면 const여도 해당 변수에 참조된 값을 바꿀 수 있다.
    const dd1 = ["1", "2", "3"]
    dd1[2] = "4";

    const dd2 = {"key1":"value", "key2":"value"}
    dd2.key2 = "value2value2"; //이런식으로 바꿀수있음
    //console.log(dd2);

    //3. for문
    // forEach :: array객체에서만 사용 가능
    let items = ["item1", "item2", "item3"]

    // items.forEach(function(item) {
    //    console.log(item);
    // });

    // for in / for of :: 모든 객체에서 사용가능
    // 비동기통신은 for in문을 많이 씀
    // for in은 key가 나온다.
    let forin1 = ["1", "2", "3"];
    let forin2 = {"key1":"1", "key2":"2", "key3":"3"}

    // for (let prop in forin1) {
    //     console.log(prop)
    // }

    // for (let prop2 in forin2) {
    //     console.log(prop2);
    // }

    // for of는 value가 나온다.

    // for (let prop3 of forin1) {
    //     console.log(prop3)
    // }

    // 이건 안됨, iterator 속성을 가진 array에서만 사용가능
    // for (let prop4 of forin2) {
    //     console.log(prop4);
    // }

    //4. 기타
    // return true >>> continue
    // return false >>> break

    //호이스팅 개념이 들어가게 함수를 짜려면 이렇게 하면 된다.
    // let fnTest = function(){
    //  console.log("fnTest");
    // }

    // 동기, 비동기는
    // await async 도 같이 알아놓자. => 동기, 비동기에 대한 제어문인데
    // 스크립트를 하다보면 자연스럽게 node.js를 하게되는데
    // node.js는 기본적으로 비동기통신이다.

</script>
<div class="col-12">
    <div class="card">
        <h5 class="card-header">영은쓰 테이블
            <form action="/excel/download" method="get" class="float-right" style="display:inline">
                <button type="submit">Excel</button>
            </form>
        </h5>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table">
                    <thead class="bg-light">
                    <tr class="border-1">
                        <th class="border-1">NO</th>
                        <th class="border-1">제목</th>
                        <th class="border-1">작성일</th>
                        <th class="border-1">작성자</th>
                    </tr>
                    </thead>
                    <tbody>
                    {{#YeList}}
                    <tr>
                        <td>{{NO}}</td>
                        <td>{{TITLE}}</td>
                        <td>{{REG_DATE}}</td>
                        <td>{{REG_ID}}</td>
                    </tr>
                    {{/YeList}}
                    <tr>
                        <td colspan="4">
                            <a class="btn btn-outline-light float-right">글 등록</a>
                        </td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<!-- ============================================================== -->
<!-- end main  -->
<!-- ============================================================== -->

{{> layout/footer }}